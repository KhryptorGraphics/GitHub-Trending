#!/usr/bin/env node
'use strict';
const co = require('co');
const GitHub = require('../libs/github');
const path = require('path');
const program = require('commander');
const fs     = require('fs');
const gm     = require('gm');
const writeFileAtomic = require('write-file-atomic');

program.version('1.0.0')
    .option('-k, --key <key>', 'GitHub token')
    .option('-t, --trending', 'Update Trending Repositories')
    .option('-s, --showcase', 'Update Showcase Repositories')
    .parse(process.argv);

const trendingPath = path.join(__dirname, '..', '.db', 'trending');
const showcasePath = path.join(__dirname, '..', '.db', 'showcase');
const gh = GitHub(program.key || process.env.GITHUB_TOKEN);
const operations = []
const delay = (time) => new Promise(res => setTimeout(res, time));

const atomic = (file, data) => {
  return new Promise((res, rej) => {
    writeFileAtomic(file, JSON.stringify(data), err => err ? rej(err) : res());
  });
};

if (program.trending) {
    const createLoadLanguageJob = function*(language) {
      const langSlug = language.slug === 'all' ? null : language.slug;
      const getRepos = function*(time) {
        const repos = yield gh.getTrendingRepositories(time, langSlug);
        yield atomic(path.join(trendingPath, `${language.slug}.${time}.json`), repos);
      };

      yield getRepos('daily');
      yield delay(2000);
      yield getRepos('weekly');
      yield delay(2000);
      yield getRepos('monthly');
      yield delay(2000);
    };

    operations.push(co.wrap(function *() {
      const languages = yield gh.getLanguages();
      languages.unshift({ name: 'All Languages', slug: 'all' });
      languages.push({ name: 'Unknown', slug: 'unknown' });

      yield atomic(path.join(trendingPath, 'languages.json'), languages);

      for (var i = 0; i < languages.length; i++) {
        yield createLoadLanguageJob(languages[i]);
      }
    }));
}

if (program.showcase) {
  operations.push(co.wrap(function *() {
    const showcases = yield gh.getShowcases();

    for (let i = 0; i < showcases.length; i++) {
      const showcase = showcases[i];
      const svgImage = path.join(__dirname, '..', 'public', showcase.slug + '.svg');
      const pngImage = path.join(__dirname, '..', 'public', showcase.slug + '.png');
      yield new Promise((res, rej) => fs.writeFile(svgImage, showcase.image, err => err ? rej(err) : res()));
      yield new Promise((res, rej) => {
        gm(svgImage).resize(96).write(pngImage, function(err) {
            fs.unlink(svgImage);
            return err ? rej(err) : res();
        });
      });

      const repos = yield gh.getShowcaseRepositories(showcase.slug);
      yield atomic(path.join(showcasePath, `${showcase.slug}.json`), {
          name: showcase.name,
          slug: showcase.slug,
          description: showcase.description,
          image: showcase.slug + '.png',
          repositories: repos
      });
    }

    yield atomic(path.join(showcasePath, 'showcases.json'), showcases.map(showcase => {
      return {
        name: showcase.name,
        slug: showcase.slug,
        description: showcase.description,
        image: showcase.slug + '.png',
      };
    }));
  }));
}

if (operations.length === 0) {
    throw new Error('You must specify one or more update operations');
}

co(function *() {
  for (var i = 0; i < operations.length; i++) {
    yield operations[i]();
  }
}).then(_ => {
  console.log('Update complete');
  return process.exit(0);
}, err => {
  console.error(err);
  return process.exit(-1);
});
